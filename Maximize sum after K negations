//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main(String[] args) throws IOException
	{
	        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t =
            Integer.parseInt(br.readLine().trim()); // Inputting the testcases
        while(t-->0)
        {
            StringTokenizer stt = new StringTokenizer(br.readLine());
            
            int n = Integer.parseInt(stt.nextToken());
            int k = Integer.parseInt(stt.nextToken());
            long a[] = new long[(int)(n)];
            String inputLine[] = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) {
                a[i] = Long.parseLong(inputLine[i]);
            }
            
            Solution obj = new Solution();
            System.out.println(obj.maximizeSum(a, n, k));
            
        }
	}
}

// } Driver Code Ends


//User function Template for Java


class Solution {

    public static long maximizeSum(long a[], int n, int k)
    {
        //Initialize a variable sum to keep track of the sum of array elements.
        //Sort the array in ascending order to make it easier to modify the smallest elements.
long sum = 0;
		Arrays.sort(a);
		for (int i = 0; i < n; i++) {
		  //  If the current element is negative and 
		   // you have remaining modifications k, make it positive and decrement k.
			if(a[i]<0 && k>0){
			    a[i] = Math.abs(a[i]);
			    k--;
			}
		}
//		Sort the array again after modifying the negative elements.
//Iterate through the modified array and update the sum with the new values.

		Arrays.sort(a);
        for (int i = 0; i < n; i++) {
			sum = sum + a[i];
		}
	//	If k is even, return the sum as it is.
//If k is odd, subtract twice the value of the smallest element from the sum and return the result.
        if(k%2==0){
            return sum;
        }		
        else 
            return (sum - a[0]-a[0]);
    }

}
